openapi: '3.0.0'

# =============================================================================

info:
  title: 'Seedy FIUBA API Gateway'
  description: >
    Part of the **Seedy FIUBA Project** ([view it on GitHub](https://github.com/orgs/SeedyFiuba-G8/)).
  version: '1.0.0'

# =============================================================================

servers:
  - url: https://sf-tdp2-gateway.herokuapp.com/
    description: 'Production'
  - url: https://sf-tdp2-gateway-dev.herokuapp.com/
    description: 'Staging'
  - url: http://localhost:3000/
    description: 'Local development'

# =============================================================================

tags:
  - name: Admins
  - name: Users
  - name: Projects
  - name: Status

# =============================================================================

paths:
  # USERS
  /users:
    get:
      summary: Get all users
      description: Get info from every user (only for admins).
      security:
        - bearerAuth: []
      tags:
        - Users
      responses:
        200:
          $ref: '#/components/responses/getAllUsers'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        500:
          $ref: '#/components/responses/500'

    post:
      summary: Register a new user
      description: Allows users to create a new basic account by email.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postUser'
      responses:
        201:
          description: 'User was registered successfully.'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /users/session:
    post:
      summary: Log in an user session
      description: Allows users to log in to their account in a new session.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /users/{userId}/profile:
    get:
      summary: Get a user's profile
      description: Allow users to retrieve a user's profile by id.
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      responses:
        200:
          $ref: '#/components/responses/getProfile'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  # ADMINS
  /admins:
    post:
      summary: Register a new admin
      description: >
        Allows to add new admins to the webadmin system.

        [TEMP: Process will change later. A link will be send to the
        email provided and the user will be able to create an admin
        account using that link.]
      security:
        - bearerAuth: []
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postAdmin'
      responses:
        201:
          description: 'Admin was registered successfully.'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /admins/session:
    post:
      summary: Log in an admin session
      description: Allows admins to log in to their account in a new session.
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        400:
          $ref: '#/components/responses/400'
        409:
          $ref: '#/components/responses/409'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  # PROJECTS
  /projects:
    get:
      summary: Get all projects (optionally, of a specified user) ordered by creation date
      description: Get info from every project (of the app/of the user) ordered by creation date.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The userId of whom we want to retrieve projects.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The number of projects to be retrieved.
        - in: query
          name: offset
          required: false
          schema:
            type: integer
          description: The number of projects we want to take as offset.
      tags:
        - Projects
      responses:
        200:
          $ref: '#/components/responses/getProjects'
        400:
          $ref: '#/components/responses/deleteProject' #authMiddleware
        500:
          $ref: '#/components/responses/500'

    post:
      summary: Create a new project
      description: Allows an entrepeneur user to create a new project.
      security:
        - bearerAuth: []
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/postProject'
      responses:
        200:
          $ref: '#/components/responses/postProject'
        400:
          $ref: '#/components/responses/400' #authMiddleware
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  /projects/{projectId}:
    get:
      summary: Get a project by id
      description: Allows a user to retrieve a project's information by its id.
      security:
        - bearerAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to retrieve
      responses:
        200:
          $ref: '#/components/responses/getProject'
        400:
          $ref: '#/components/responses/deleteProject' #aithMiddleware
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

    patch:
      summary: Modify the information of the project.
      description: Allows an owner of a project or an admin to modify the information of a project.
      security:
        - bearerAuth: []
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/patchProject'
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to modify
      responses:
        200:
          $ref: '#/components/responses/patchProject'
        400:
          $ref: '#/components/responses/400' #authMiddleware
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

    delete:
      summary: Delete a project by ID
      description: Allows an owner of a project or an admin to delete a project.
      security:
        - bearerAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to delete
      responses:
        200:
          $ref: '#/components/responses/deleteProject'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        415:
          $ref: '#/components/responses/415'
        500:
          $ref: '#/components/responses/500'

  # STATUS
  /health:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/health'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /ping:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/ping'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

  /pingAll:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/pingAll'
        400:
          $ref: '#/components/responses/400'
        415:
          $ref: '#/components/responses/415'

# =============================================================================

components:
  # ---------------------------------------------------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    # ERRORS
    400:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    409:
      description: Conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    415:
      description: Unsupported Media Type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    500:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # USERS
    getAllUsers:
      description: Users info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllUsers'

    getProfile:
      description: User profile retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'

    # COMMON
    postSession:
      description: Logged in successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'

    # PROJECTS
    getProjects:
      description: Projects info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllProjects'

    getProject:
      description: Project info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'

    postProject:
      description: Project created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    patchProject:
      description: Project modified successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    deleteProject:
      description: Project deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    # STATUS
    health:
      description: Microservice general health state reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'

    ping:
      description: Server is active.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ping'

    pingAll:
      description: Server and its services are active..
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PingAll'

  # ---------------------------------------------------------------------------
  requestBodies:
    # USERS
    postUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegisterData'

    # ADMINS
    postAdmin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminRegisterData'

    # PROJECTS
    postProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostProjectData'

    patchProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchProjectData'

    # COMMON
    postSession:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/LoginData'
              - $ref: '#/components/schemas/FBLoginData'

  # ---------------------------------------------------------------------------
  schemas:
    # GENERAL
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            status:
              type: integer
            name:
              type: string
            message:
              type: string
            errors:
              type: array
              items:
                type: object
          required:
            - status
            - name
      required:
        - error

    # TYPES
    Date:
      type: string
      format: date-time
      example: '2021-06-13T21:29:29.330Z'

    Email:
      type: string
      format: email
      example: 'example@email.com'

    Id:
      type: string
      format: uuid
      example: '123e4567-e89b-12d3-a456-426614174000'

    Token:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    Picture:
      type: string
      example: 'https://imgur.com/gallery/rFvivtw'

    # USERS
    AllUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - users

    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          $ref: '#/components/schemas/Email'
        banned:
          type: boolean
          example: false
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        signupDate:
          $ref: '#/components/schemas/Date'
      required:
        - id
        - email
        - banned
        - firstName
        - lastName
        - signupDate

    UserRegisterData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
      required:
        - email
        - password
        - firstName
        - lastName

    Profile:
      type: object
      properties:
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        banned:
          type: boolean
          example: false
        signupDate:
          $ref: '#/components/schemas/Date'
        profilePicUrl:
          $ref: '#/components/schemas/Picture'
      required:
        - firstName
        - lastName
        - banned
        - signupDate
        - profilePicUrl

    # ADMINS
    AdminRegisterData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email
        - password

    # PROJECTS
    AllProjects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
      required:
        - projects

    Project:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        userId:
          $ref: '#/components/schemas/Id'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        publishedOn:
          $ref: '#/components/schemas/Date'
        finalizedBy:
          $ref: '#/components/schemas/Date'
      required:
        - id
        - userId
        - title
        - description
        - type
        - objective
        - country
        - city
        - publishedOn
        - finalizedBy

    PostProjectData:
      type: object
      properties:
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          $ref: '#/components/schemas/Date'
      required:
        - title
        - description
        - type
        - objective
        - country
        - city
        - finalizedBy

    PatchProjectData:
      type: object
      properties:
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          $ref: '#/components/schemas/Date'
      minProperties: 1

    ProjectId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required:
        - id

    # COMMON
    FBLoginData:
      type: object
      properties:
        fbToken:
          type: string
          example: 'EAAHTZAxeFHeUBACOZArY9H3yMDXtG7NF7K85VGt43keuBxd5LgAUz7gdCKdyyZCVGNGNqMZBy0J6HjlkldhIFm4RZBIPhqN0HSiZAbBvEsNIOIdhkzVmI1x6FWhRBtXORs1fXEyZCnkIPZCZCNVCaxbgisI1WjOyPRmYTCuGIpx014MY0FTYQxBXt7xr25ghdZChywWZAISf1escFnA1vVrBJylBXUEpt29Yvh557Ac0E8QYgZDZD'
      required:
        - fbToken
        - password

    LoginData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email

    Session:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        token:
          $ref: '#/components/schemas/Token'
      required:
        - id
        - token

    # STATUS
    Ping:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
      required:
        - status

    PingAll:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
        services:
          type: object
          properties:
            apikeys:
              type: string
              example: 'ok'
            core:
              type: string
              example: 'ok'
            users:
              type: string
              example: 'ok'

    Health:
      type: object
      properties:
        status:
          type: string
          example: 'UP'
        services:
          type: object
          properties:
            apikeys:
              $ref: '#/components/schemas/HealthServiceStatus'
            core:
              $ref: '#/components/schemas/HealthServiceStatus'
            users:
              $ref: '#/components/schemas/HealthServiceStatus'

          required:
            - apikeys
            - core
            - users
      required:
        - status
        - services

    HealthServiceStatus:
      oneOf:
        - type: object
          example: { 'database': 'UP' }
        - type: string
          example: 'timed out'
#
# =============================================================================
