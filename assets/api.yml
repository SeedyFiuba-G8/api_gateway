openapi: '3.0.0'

# =============================================================================

info:
  title: 'Seedy FIUBA API Gateway'
  description: >
    Part of the **Seedy FIUBA Project** ([view it on GitHub](https://github.com/orgs/SeedyFiuba-G8/)).
  version: '1.0.0'

# =============================================================================

servers:
  - url: https://sf-tdp2-gateway.herokuapp.com/
    description: 'Production'
  - url: https://sf-tdp2-gateway-dev.herokuapp.com/
    description: 'Staging'
  - url: http://localhost:3000/
    description: 'Local development'

# =============================================================================

tags:
  - name: Admins
  - name: Users
  - name: Projects
  - name: Reviewers
  - name: Status

# =============================================================================

paths:
  # USERS
  /users:
    get:
      summary: Get all users
      description: Get info from every user (only for admins).
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - in: query
          name: firstName
          required: false
          schema:
            type: string
          description: First name of the user.
        - in: query
          name: lastName
          required: false
          schema:
            type: string
          description: Last name of the user.
        - in: query
          name: banned
          required: false
          schema:
            type: boolean
          description: User banned status.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The number of users to be retrieved.
        - in: query
          name: offset
          required: false
          schema:
            type: integer
          description: The number of users we want to take as offset.
      responses:
        200:
          $ref: '#/components/responses/getAllUsers'
        default:
          $ref: '#/components/responses/Error'

    post:
      summary: Register a new user
      description: Allows users to create a new basic account by email.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postUser'
      responses:
        201:
          $ref: '#/components/responses/postUser'
        default:
          $ref: '#/components/responses/Error'

  /users/session:
    post:
      summary: Log in an user session
      description: Allows users to log in to their account in a new session.
      tags:
        - Users
      requestBody:
        $ref: '#/components/requestBodies/postUserSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        default:
          $ref: '#/components/responses/Error'

  /users/{userId}:
    get:
      summary: Get a user's profile
      description: Allow users to retrieve a user's profile by id.
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      responses:
        200:
          $ref: '#/components/responses/getProfile'
        default:
          $ref: '#/components/responses/Error'

    patch:
      summary: Modify the information of a user's profile
      description: Allows the user to update its information.
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the user
      requestBody:
        $ref: '#/components/requestBodies/patchUser'
      responses:
        200:
          description: 'User information updated successfully.'
        default:
          $ref: '#/components/responses/Error'

  # ADMINS
  /admins:
    post:
      summary: Register a new admin
      description: >
        Allows to add new admins to the webadmin system.

        [TEMP: Process will change later. A link will be send to the
        email provided and the user will be able to create an admin
        account using that link.]
      security:
        - bearerAuth: []
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postAdmin'
      responses:
        201:
          description: 'Admin was registered successfully.'
        default:
          $ref: '#/components/responses/Error'

  /admins/session:
    post:
      summary: Log in an admin session
      description: Allows admins to log in to their account in a new session.
      tags:
        - Admins
      requestBody:
        $ref: '#/components/requestBodies/postAdminSession'
      responses:
        200:
          $ref: '#/components/responses/postSession'
        default:
          $ref: '#/components/responses/Error'

  # PROJECTS
  /projects:
    get:
      summary: Get all projects (optionally, of a specified user) ordered by creation date
      description: Get info from every project (of the app/of the user) ordered by creation date.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The userId of whom we want to retrieve projects.
        - in: query
          name: reviewerId
          required: false
          schema:
            $ref: '#/components/schemas/Id'
          description: The id of the reviewer of whom we want to retrieve projects.
        - in: query
          name: type
          required: false
          schema:
            type: string
            example: 'social'
          description: Type of project to retrieve.
        - in: query
          name: status
          required: false
          schema:
            $ref: '#/components/schemas/ProjectStatus'
          description: Status of project to retrieve.
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: The number of projects to be retrieved.
        - in: query
          name: offset
          required: false
          schema:
            type: integer
          description: The number of projects we want to take as offset.
      tags:
        - Projects
      responses:
        200:
          $ref: '#/components/responses/getProjects'
        default:
          $ref: '#/components/responses/Error'

    post:
      summary: Create a new project
      description: Allows an entrepeneur user to create a new project.
      security:
        - bearerAuth: []
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/postProject'
      responses:
        200:
          $ref: '#/components/responses/postProject'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}:
    get:
      summary: Get a project by id
      description: Allows a user to retrieve a project's information by its id.
      security:
        - bearerAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to retrieve
      responses:
        200:
          $ref: '#/components/responses/getProject'
        default:
          $ref: '#/components/responses/Error'

    patch:
      summary: Modify the information of the project.
      description: Allows an owner of a project or an admin to modify the information of a project. Allows a reviewer of a project to approve stage(s), by patching approvedStage. Allows an entrepeneur to mark stage(s) as completed, by patching lastCompletedStage.
      security:
        - bearerAuth: []
      tags:
        - Projects
      requestBody:
        $ref: '#/components/requestBodies/patchProject'
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to modify
      responses:
        200:
          $ref: '#/components/responses/patchProject'
        default:
          $ref: '#/components/responses/Error'

    delete:
      summary: Delete a project by ID
      description: Allows an owner of a project or an admin to delete a project.
      security:
        - bearerAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to delete
      responses:
        200:
          $ref: '#/components/responses/deleteProject'
        default:
          $ref: '#/components/responses/Error'

  /projects/{projectId}/funds:
    post:
      summary: Fund a project
      description: Allows a user to fund a project.
      security:
        - bearerAuth: []
      tags:
        - Projects
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project to fund
      requestBody:
        $ref: '#/components/requestBodies/fundProjectData'
      responses:
        200:
          $ref: '#/components/responses/fundProject'
        default:
          $ref: '#/components/responses/Error'

  # REVIEWERS
  /reviewrequests/{reviewerId}:
    get:
      summary: Get review requests for a given reviewer
      description: Allows a reviewer to retrieve its review requests.
      security:
        - bearerAuth: []
      tags:
        - Reviewers
      parameters:
        - in: path
          name: reviewerId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the reviewer
      responses:
        200:
          $ref: '#/components/responses/getReviewRequests'
        default:
          $ref: '#/components/responses/Error'

  /reviewrequests/{reviewerId}/{projectId}:
    put:
      summary: Change status of review request
      description: Allows a reviewer to change the status of its review requests.
      security:
        - bearerAuth: []
      tags:
        - Reviewers
      parameters:
        - in: path
          name: projectId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the project
        - in: path
          name: reviewerId
          schema:
            $ref: '#/components/schemas/Id'
          required: true
          description: uuid of the reviewer
      requestBody:
        $ref: '#/components/requestBodies/putReviewRequest'
      responses:
        204:
          description: 'Review request updated successfully.'
        default:
          $ref: '#/components/responses/Error'

  # STATUS
  /health:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/health'
        default:
          $ref: '#/components/responses/Error'

  /ping:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/ping'
        default:
          $ref: '#/components/responses/Error'

  /pingAll:
    get:
      tags:
        - Status
      responses:
        200:
          $ref: '#/components/responses/pingAll'
        default:
          $ref: '#/components/responses/Error'

# =============================================================================

components:
  # ---------------------------------------------------------------------------
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  # ---------------------------------------------------------------------------
  requestBodies:
    # USERS
    patchUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchUserData'

    postUser:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegisterData'

    postUserSession:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/LoginData'
              - $ref: '#/components/schemas/FBLoginData'

    # ADMINS
    postAdmin:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminRegisterData'

    postAdminSession:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginData'

    # PROJECTS
    fundProjectData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FundProjectData'

    postProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostProjectData'

    patchProject:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatchProjectData'

    # REVIEWERS
    putReviewRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutReviewRequest'

  # ---------------------------------------------------------------------------
  responses:
    Error:
      description: >
        An error has occured. Check response body for more
        information about what happened.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    # USERS
    getAllUsers:
      description: Users info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllUsers'

    getProfile:
      description: User profile retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Profile'

    postUser:
      description: 'User was registered successfully.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostUserData'

    # COMMON
    postSession:
      description: Logged in successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Session'

    # PROJECTS
    fundProject:
      description: Transaction initiated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TxHash'

    getProjects:
      description: Projects info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AllProjects'

    getProject:
      description: Project info retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Project'

    postProject:
      description: Project created successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    patchProject:
      description: Project modified successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    deleteProject:
      description: Project deleted successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectId'

    # REVIEWERS
    getReviewRequests:
      description: Review requests retrieved successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ReviewRequests'

    # STATUS
    health:
      description: Microservice general health state reported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'

    ping:
      description: Server is active.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ping'

    pingAll:
      description: Server and its services are active..
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PingAll'

  # ---------------------------------------------------------------------------
  schemas:
    # GENERAL
    Error:
      type: object
      properties:
        status:
          type: integer
        name:
          type: string
        message:
          type: string
        errors:
          type: array
          items:
            type: object
      required:
        - status
        - name

    # TYPES
    Address:
      type: string
      example: '0xf018Be4Fe4fBD4cA1B1162A44bB139a343C2087b'

    Date:
      type: string
      format: date-time
      example: '2021-06-13T21:29:29.330Z'

    Email:
      type: string
      format: email
      example: 'example@email.com'

    ETHAmount:
      type: number
      example: 0.000001

    FBToken:
      type: string
      example: 'EAAHTZAxeFHeUBACOZArY9H3yMDXtG7NF7K85VGt43keuBxd5LgAUz7gdCKdyyZCVGNGNqMZBy0J6HjlkldhIFm4RZBIPhqN0HSiZAbBvEsNIOIdhkzVmI1x6FWhRBtXORs1fXEyZCnkIPZCZCNVCaxbgisI1WjOyPRmYTCuGIpx014MY0FTYQxBXt7xr25ghdZChywWZAISf1escFnA1vVrBJylBXUEpt29Yvh557Ac0E8QYgZDZD'

    Id:
      type: string
      format: uuid
      example: '123e4567-e89b-12d3-a456-426614174000'

    Hash:
      type: string
      example: '0x30b003c570eccaf1705acd4621f72993acb51715f8decbf61535f21376cfe1d2'

    Token:
      type: string
      example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

    Picture:
      type: string
      example: 'https://imgur.com/gallery/rFvivtw'

    Stage:
      type: object
      properties:
        cost:
          $ref: '#/components/schemas/ETHAmount'
        description:
          type: string
          example: 'In this stage, we will buy the equipment.'

    Stages:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
      minItems: 1

    # USERS
    AllUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      required:
        - users

    FBLoginData:
      type: object
      properties:
        fbToken:
          $ref: '#/components/schemas/FBToken'
      required:
        - fbToken

    PatchUserData:
      type: object
      properties:
        city:
          type: string
          example: 'Buenos Aires'
        country:
          type: string
          example: 'Argentina'
        interests:
          type: array
          items:
            type: string
          example: ['music', 'entertainment', 'productivity']
        profilePicUrl:
          $ref: '#/components/schemas/Picture'
      minProperties: 1

    PostUserData:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required:
        - id

    Profile:
      type: object
      properties:
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        banned:
          type: boolean
          example: false
        signupDate:
          $ref: '#/components/schemas/Date'
        city:
          type: string
          example: 'Buenos Aires'
        country:
          type: string
          example: 'Argentina'
        interests:
          type: array
          items:
            type: string
          example: ['music', 'entertainment', 'productivity']
        profilePicUrl:
          $ref: '#/components/schemas/Picture'
        address:
          $ref: '#/components/schemas/Address'
        balance:
          $ref: '#/components/schemas/ETHAmount'
      required:
        - firstName
        - lastName
        - banned
        - signupDate
        - city
        - country
        - interests

    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          $ref: '#/components/schemas/Email'
        banned:
          type: boolean
          example: false
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        signupDate:
          $ref: '#/components/schemas/Date'
      required:
        - id
        - email
        - banned
        - firstName
        - lastName
        - signupDate

    UserRegisterData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
      required:
        - email
        - password
        - firstName
        - lastName

    # ADMINS
    AdminRegisterData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email
        - password

    # PROJECTS
    AllProjects:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/ProjectPreview'
      required:
        - projects

    FundProjectData:
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/ETHAmount'
      required:
        - amount

    Project:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        userId:
          $ref: '#/components/schemas/Id'
        reviewerId:
          $ref: '#/components/schemas/Id'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        publishedOn:
          $ref: '#/components/schemas/Date'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        reviewers:
          $ref: '#/components/schemas/Reviewers'
        stages:
          $ref: '#/components/schemas/Stages'
        totalFunded:
          $ref: '#/components/schemas/ETHAmount'
        approvedStage:
          $ref: '#/components/schemas/StageId'
      required:
        - id
        - status
        - userId
        - title
        - description
        - type
        - objective
        - country
        - city
        - publishedOn
        - finalizedBy
        - tags
        - stages
        - totalFunded
        - approvedStage

    ProjectPreview:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          $ref: '#/components/schemas/ProjectStatus'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        stages:
          $ref: '#/components/schemas/Stages'
        totalFunded:
          $ref: '#/components/schemas/ETHAmount'
        approvedStage:
          $ref: '#/components/schemas/StageId'
      required:
        - id
        - status
        - title
        - description
        - type
        - objective
        - country
        - city
        - finalizedBy
        - tags
        - stages
        - totalFunded
        - approvedStage

    PostProjectData:
      type: object
      properties:
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        reviewers:
          $ref: '#/components/schemas/ReviewersRaw'
        stages:
          $ref: '#/components/schemas/Stages'
      required:
        - title
        - description
        - type
        - objective
        - country
        - city
        - finalizedBy
        - tags
        - reviewers
        - stages

    PatchProjectData:
      type: object
      properties:
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        status:
          $ref: '#/components/schemas/FundingProjectStatus'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        coverPicUrl:
          $ref: '#/components/schemas/Picture'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        tags:
          $ref: '#/components/schemas/Tags'
        reviewers:
          $ref: '#/components/schemas/ReviewersRaw'
        stages:
          $ref: '#/components/schemas/Stages'
        approvedStage:
          $ref: '#/components/schemas/StageId'
        lastCompletedStage:
          $ref: '#/components/schemas/StageId'
      minProperties: 1

    ProjectId:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
      required:
        - id

    ProjectStatus:
      type: string
      enum:
        - DRAFT
        - FUNDING
        - IN_PROGRESS
        - COMPLETED

    FundingProjectStatus:
      type: string
      enum:
        - FUNDING

    Tags:
      type: array
      items:
        type: string
      example: ['javascript', 'python', 'food']

    TxHash:
      type: object
      properties:
        txHash:
          $ref: '#/components/schemas/Hash'
      required:
        - txHash

    # REVIEWERS

    Reviewer:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        firstName:
          type: string
          example: 'Memis'
        lastName:
          type: string
          example: 'Pomofot'
        status:
          $ref: '#/components/schemas/ReviewerStatus'
      required:
        - email
        - firstName
        - lastName
        - status

    Reviewers:
      type: array
      items:
        $ref: '#/components/schemas/Reviewer'

    ReviewersRaw:
      type: array
      items:
        $ref: '#/components/schemas/Email'

    ReviewerStatus:
      type: string
      enum:
        - PENDING
        - ACCEPTED
        - REJECTED

    PutReviewerStatus:
      type: string
      enum:
        - ACCEPTED
        - REJECTED

    ReviewRequests:
      type: object
      properties:
        requests:
          type: array
          items:
            $ref: '#/components/schemas/ReviewRequest'
      required:
        - requests

    ReviewRequest:
      type: object
      properties:
        projectId:
          $ref: '#/components/schemas/Id'
        userId:
          $ref: '#/components/schemas/Id'
        title:
          type: string
          example: 'Prohibir la utilizacion de Winbugs globalmente'
        description:
          type: string
          example: 'No puede ser que haya gente que use Winbugs'
        type:
          type: string
          example: 'social'
        objective:
          type: string
          example: 'Salvar a la gente de esta maldicion'
        country:
          type: string
          example: 'Argentina'
        city:
          type: string
          example: 'Buenos Aires'
        publishedOn:
          $ref: '#/components/schemas/Date'
        finalizedBy:
          $ref: '#/components/schemas/Date'
        status:
          $ref: '#/components/schemas/ReviewerStatus'
        approvedStage:
          $ref: '#/components/schemas/StageId'
      required:
        - projectId
        - userId
        - title
        - description
        - type
        - objective
        - country
        - city
        - publishedOn
        - finalizedBy
        - status
        - approvedStage

    PutReviewRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PutReviewerStatus'
      required:
        - status

    # COMMON
    LoginData:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          type: string
          example: 'SomePassword123'
      required:
        - email

    Session:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        token:
          $ref: '#/components/schemas/Token'
      required:
        - id
        - token

    # STATUS
    Ping:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
      required:
        - status

    PingAll:
      type: object
      properties:
        status:
          type: string
          example: 'ok'
        services:
          type: object
          properties:
            apikeys:
              type: string
              example: 'ok'
            core:
              type: string
              example: 'ok'
            users:
              type: string
              example: 'ok'

    Health:
      type: object
      properties:
        status:
          type: string
          example: 'UP'
        services:
          type: object
          properties:
            apikeys:
              $ref: '#/components/schemas/HealthServiceStatus'
            core:
              $ref: '#/components/schemas/HealthServiceStatus'
            users:
              $ref: '#/components/schemas/HealthServiceStatus'
          required:
            - apikeys
            - core
            - users
      required:
        - status
        - services

    HealthServiceStatus:
      oneOf:
        - type: object
          example: { 'database': 'UP' }
        - type: string
          example: 'timed out'
#
# =============================================================================
